from typing import List

class TrieNode:
    def __init__(self):
        self.children = [None] * 26  # l∆∞u 26 ch·ªØ c√°i a-z
        self.idx = -1                # v·ªã tr√≠ t·ª´ trong m·∫£ng words
        self.refs = 0                # s·ªë l·∫ßn tham chi·∫øu (bao nhi√™u t·ª´ ƒëi qua node n√†y)

    def addWord(self, word, i):
        cur = self
        cur.refs += 1                # node g·ªëc c≈©ng c√≥ th√™m 1 t·ª´ ƒëi qua
        for c in word:               # duy·ªát t·ª´ng k√Ω t·ª± trong word
            index = ord(c) - ord('a')  # t√≠nh ch·ªâ s·ªë 0-25
            if not cur.children[index]:  # n·∫øu ch∆∞a c√≥ node con th√¨ t·∫°o
                cur.children[index] = TrieNode()
            cur = cur.children[index]   # ƒëi ti·∫øp xu·ªëng node con
            cur.refs += 1               # tƒÉng s·ªë t·ª´ ƒëi qua node n√†y
        cur.idx = i                     # ƒë√°nh d·∫•u node cu·ªëi l√† 1 t·ª´ h·ª£p l·ªá

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TrieNode()
        for i in range(len(words)):   # th√™m t·∫•t c·∫£ words v√†o trie
            root.addWord(words[i], i)

        ROWS, COLS = len(board), len(board[0])  # s·ªë h√†ng, s·ªë c·ªôt
        res = []  # l∆∞u k·∫øt qu·∫£

        def getIndex(c):
            return ord(c) - ord('a')  # ƒë·ªïi ch·ªØ c√°i th√†nh s·ªë (0-25)

        def dfs(r, c, node):
            # ƒëi·ªÅu ki·ªán d·ª´ng: ra kh·ªèi b·∫£ng, g·∫∑p √¥ ƒë√£ thƒÉm '*', ho·∫∑c kh√¥ng c√≥ node con
            if (r < 0 or c < 0 or r >= ROWS or c >= COLS or 
                board[r][c] == '*' or not node.children[getIndex(board[r][c])]):
                return

            tmp = board[r][c]              # l∆∞u l·∫°i ch·ªØ c√°i hi·ªán t·∫°i
            board[r][c] = '*'              # ƒë√°nh d·∫•u ƒë√£ thƒÉm
            prev = node                    # node cha
            node = node.children[getIndex(tmp)]  # node con t∆∞∆°ng ·ª©ng k√Ω t·ª±

            if node.idx != -1:             # t√¨m th·∫•y 1 t·ª´ ho√†n ch·ªânh
                res.append(words[node.idx])  # th√™m t·ª´ v√†o k·∫øt qu·∫£
                node.idx = -1                # tr√°nh tr√πng l·∫∑p
                node.refs -= 1               # gi·∫£m tham chi·∫øu
                if not node.refs:            # n·∫øu node n√†y ko c√≤n t·ª´ n√†o
                    prev.children[getIndex(tmp)] = None  # x√≥a node
                    node = None
                    board[r][c] = tmp        # backtrack: kh√¥i ph·ª•c ch·ªØ c√°i
                    return

            # ti·∫øp t·ª•c t√¨m 4 h∆∞·ªõng
            dfs(r + 1, c, node)
            dfs(r - 1, c, node)
            dfs(r, c + 1, node)
            dfs(r, c - 1, node)

            board[r][c] = tmp  # backtrack: kh√¥i ph·ª•c ch·ªØ c√°i

        # ch·∫°y dfs t·ª´ t·∫•t c·∫£ √¥ trong board
        for r in range(ROWS):
            for c in range(COLS):
                dfs(r, c, root)

        return res

# ---------------------------
# V√≠ d·ª• test trong VS Code:
if __name__ == "__main__":
    board = [
        ["o","a","a","n"],
        ["e","t","a","e"],
        ["i","h","k","r"],
        ["i","f","l","v"]
    ]
    words = ["oath","pea","eat","rain"]
    sol = Solution()
    print(sol.findWords(board, words))  # üëâ ['oath', 'eat']
