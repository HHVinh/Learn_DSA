from typing import List
class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:

        # N·∫øu s·ªë hoa √≠t h∆°n s·ªë b√≥ c·∫ßn * s·ªë hoa m·ªói b√≥ => kh√¥ng th·ªÉ t·∫°o b√≥
        if len(bloomDay) < m * k:
            return -1
        
        # H√†m check(mid): Ki·ªÉm tra xem n·∫øu ch·ªù ƒë·∫øn ng√†y mid,
        # ta c√≥ t·∫°o ƒë∆∞·ª£c √≠t nh·∫•t m b√≥ hoa (m·ªói b√≥ c√≥ k hoa li√™n ti·∫øp) hay kh√¥ng
        def check(mid) -> bool:
            bongHoa = 0   # s·ªë hoa li√™n ti·∫øp ƒë√£ n·ªü
            boHoa = 0     # s·ªë b√≥ ƒë√£ t·∫°o ƒë∆∞·ª£c

            for num in bloomDay:
                if num <= mid:        # hoa n√†y ƒë√£ n·ªü v√†o ng√†y mid
                    bongHoa += 1
                    if bongHoa == k:  # n·∫øu ƒë·ªß k hoa li√™n ti·∫øp
                        boHoa += 1    # t·∫°o ƒë∆∞·ª£c 1 b√≥
                        bongHoa = 0   # reset, b·∫Øt ƒë·∫ßu ƒë·∫øm chu·ªói m·ªõi
                else:
                    bongHoa = 0       # g·∫∑p hoa ch∆∞a n·ªü th√¨ chu·ªói b·ªã ƒë·ª©t, reset

            return boHoa >= m

            # üí° C√°ch 2 (t∆∞∆°ng t·ª± logic tr√™n nh∆∞ng g·ªçn h∆°n):
            # if num > mid:
            #     bongHoa = 0
            # else:
            #     boHoa += (bongHoa + 1) // k
            #     bongHoa = (bongHoa + 1) % k

        # Binary search ƒë·ªÉ t√¨m ng√†y nh·ªè nh·∫•t th·ªèa ƒëi·ªÅu ki·ªán
        l, r = 1, max(bloomDay)
        while l < r:
            mid = l + (r - l) // 2
            if check(mid):
                r = mid   # c√≥ th·ªÉ t·∫°o ƒë·ªß b√≥ => th·ª≠ ng√†y nh·ªè h∆°n
            else:
                l = mid + 1  # ch∆∞a ƒë·ªß b√≥ => c·∫ßn th√™m ng√†y
        return l


# ========================
# Code ƒë·ªÉ test trong VS Code
# ========================
if __name__ == "__main__":
    bloomDay = [1, 10, 3, 10, 2]
    m, k = 3, 1

    sol = Solution()
    print("K·∫øt qu·∫£:", sol.minDays(bloomDay, m, k))  # D·ª± ki·∫øn: 3

    # Th·ª≠ th√™m test kh√°c
    print("Test 2:", sol.minDays([7, 7, 7, 7, 12, 7, 7], 2, 3))  # D·ª± ki·∫øn: 12
    print("Test 3:", sol.minDays([1000000000, 1000000000], 1, 1))  # D·ª± ki·∫øn: 1000000000
    print("Test 4:", sol.minDays([1, 10, 3, 10, 2], 3, 2))  # D·ª± ki·∫øn: -1
